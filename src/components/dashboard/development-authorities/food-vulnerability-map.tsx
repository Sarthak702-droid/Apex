
'use client';

import { APIProvider, Map, AdvancedMarker } from '@vis.gl/react-google-maps';
import { Badge } from '@/components/ui/badge';
import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';

const zones = [
    { id: 'zone-a', name: 'Zone A', position: { lat: 20.31, lng: 85.83 }, vulnerability: 'low' },
    { id: 'zone-b', name: 'Zone B', position: { lat: 20.28, lng: 85.81 }, vulnerability: 'medium' },
    { id: 'zone-c', name: 'Zone C', position: { lat: 20.29, lng: 85.85 }, vulnerability: 'high' },
    { id: 'zone-d', name: 'Zone D', position: { lat: 20.26, lng: 85.84 }, vulnerability: 'low' },
];

const vulnerabilityStyles = {
    low: 'bg-green-500/80 hover:bg-green-600 border-green-700/80',
    medium: 'bg-yellow-500/80 hover:bg-yellow-600 border-yellow-700/80',
    high: 'bg-red-500/80 hover:bg-red-600 border-red-700/80',
};

const mapStyles: google.maps.MapTypeStyle[] = [
    { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },
    { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },
    { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },
    {
      featureType: 'administrative.locality',
      elementType: 'labels.text.fill',
      stylers: [{ color: '#d59563' }],
    },
    {
      featureType: 'poi',
      stylers: [{ visibility: 'off' }],
    },
    {
      featureType: 'road',
      elementType: 'geometry',
      stylers: [{ color: '#38414e' }],
    },
    {
      featureType: 'road',
      elementType: 'geometry.stroke',
      stylers: [{ color: '#212a37' }],
    },
    {
      featureType: 'road',
      elementType: 'labels.text.fill',
      stylers: [{ color: '#9ca5b3' }],
    },
    {
      featureType: 'road.highway',
      elementType: 'geometry',
      stylers: [{ color: '#746855' }],
    },
    {
      featureType: 'road.highway',
      elementType: 'geometry.stroke',
      stylers: [{ color: '#1f2835' }],
    },
    {
      featureType: 'road.highway',
      elementType: 'labels.text.fill',
      stylers: [{ color: '#f3d19c' }],
    },
    {
      featureType: 'transit',
      stylers: [{ visibility: 'off' }],
    },
    {
      featureType: 'water',
      elementType: 'geometry',
      stylers: [{ color: '#17263c' }],
    },
    {
      featureType: 'water',
      elementType: 'labels.text.fill',
      stylers: [{ color: '#515c6d' }],
    },
    {
      featureType: 'water',
      elementType: 'labels.text.stroke',
      stylers: [{ color: '#17263c' }],
    },
];

export function FoodVulnerabilityMap() {
    const [selectedZone, setSelectedZone] = useState<typeof zones[0] | null>(null);

    if (!process.env.GOOGLE_MAPS_API_KEY) {
        return (
            <div className="flex items-center justify-center h-full bg-muted/30 p-4 text-center rounded-lg border">
                <p className='text-muted-foreground'>Google Maps API key is not configured. Please add it to your environment variables.</p>
            </div>
        );
    }
    
    return (
        <div className="relative w-full aspect-[4/3] bg-muted/30 rounded-lg overflow-hidden border">
            <APIProvider apiKey={process.env.GOOGLE_MAPS_API_KEY}>
                <Map
                    defaultCenter={{ lat: 20.2961, lng: 85.8245 }}
                    defaultZoom={12}
                    mapId="a2b3c4d5e6f7g8h9"
                    styles={mapStyles}
                    disableDefaultUI={true}
                    gestureHandling={'greedy'}
                >
                    {zones.map(zone => (
                        <AdvancedMarker 
                            key={zone.id} 
                            position={zone.position}
                            onClick={() => setSelectedZone(zone)}
                        >
                            <Badge
                                className={`cursor-pointer transition-all text-white border-2 border-white/50 ${vulnerabilityStyles[zone.vulnerability as keyof typeof vulnerabilityStyles]}`}
                            >
                                {zone.name}
                            </Badge>
                        </AdvancedMarker>
                    ))}
                </Map>
            </APIProvider>
            
            <div className="absolute bottom-4 right-4 bg-background/80 p-3 rounded-md border shadow-lg">
                <h4 className="font-semibold text-xs mb-2">Vulnerability Legend</h4>
                <div className="flex flex-col gap-2">
                    <div className="flex items-center gap-2">
                        <div className="h-3 w-3 rounded-full bg-green-500"></div>
                        <span className="text-xs">Low Risk</span>
                    </div>
                    <div className="flex items-center gap-2">
                        <div className="h-3 w-3 rounded-full bg-yellow-500"></div>
                        <span className="text-xs">Medium Risk</span>
                    </div>
                    <div className="flex items-center gap-2">
                        <div className="h-3 w-3 rounded-full bg-red-500"></div>
                        <span className="text-xs">High Risk</span>
                    </div>
                </div>
            </div>

            {selectedZone && (
                <Card className='absolute top-4 left-4 w-60 bg-background/90'>
                    <CardContent className='p-4'>
                        <h4 className='font-bold'>{selectedZone.name}</h4>
                        <p className='text-sm text-muted-foreground'>Vulnerability: <span className={`capitalize font-semibold ${
                            selectedZone.vulnerability === 'high' ? 'text-red-500' : 
                            selectedZone.vulnerability === 'medium' ? 'text-yellow-500' : 'text-green-500'
                        }`}>{selectedZone.vulnerability}</span></p>
                        <Button variant='link' className='p-0 h-auto mt-2 text-xs' onClick={() => setSelectedZone(null)}>Close</Button>
                    </CardContent>
                </Card>
            )}
        </div>
    );
}
